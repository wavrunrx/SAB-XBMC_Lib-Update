#!/bin/bash

# Copyright (c) March 2013, Eric Andrew Bixler
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	* Redistributions of source code must retain the above copyright
#	  notice, this list of conditions and the following disclaimer.
#	* Redistributions in binary form must reproduce the above copyright
#	  notice, this list of conditions and the following disclaimer in the
#	  documentation and/or other materials provided with the distribution.
#	* Neither the name of the <organization> nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.


###### Change The Following Variables:

## XBMC details
xbmc_port="8090"
xbmc_ip="192.168.2.33"
xbmc_mac="BC:5F:F4:1D:8C:B4"
xbmc_pass="xbmc"
xbmc_user="xbmc"

## Set this to the IP of the machine running SABnzbd
remote="192.168.2.104"

## What file-sharing protocol are we using for remove shares; set to "smb", or "nfs"
protocol="nfs"

## Set your SABnzbd categories here
SAB_TV="tv"
SAB_Uncategorized_TV="uncat_tv"
SAB_Anime="anime"
SAB_Archive="archive"
SAB_Documentaries="documentaries"
SAB_Movies="movies"


###### ATTENTION: DO NOT EDIT PAST THIS POINT ######

success ()
{
	echo
	echo "Time Completed:"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Catalog Updated Successfully !"
	exit 0
}

failure ()
{
	echo
	echo "Time Failed:"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: XBMC didn't respond !"
	exit 1
}

processing_failed ()
{
	echo
	echo "Time Failed:"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: SABnzbd Post-Processing Failed !"
	exit 1
}

name_failed ()
{
	echo
	echo "Time Failed:"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: NZB; Name Formatting Issue !"
	exit 1
}


###### Check Post-Processing Outcome

if [ "$7" -ge "1" ] ;
then
	echo
	echo "Post-Processing Failed"
	echo "Not Updating Library"
	processing_failed
	## Exiting
fi


###### Define Junk Files & Decide Videos' Category

if [ "$5" = "$SAB_TV" ] || [ "$5" = "$SAB_Uncategorized_TV" ] ;
then
	echo
	echo "[ TV ] Detected ( $5 )"
	echo
	GARBAGE="nfo srt sfv srr url txt md5 diz jpg bmp png"
	detec="1"
else
	echo
	echo "[ Movie ] Detected"
	echo
	GARBAGE="sfv srr url txt md5 diz jpg bmp png"
	detec="0"
fi


###### Check For Proper Scene Naming Scheme

echo "$2" | grep -o [S,s]*[[:digit:]][E,e,X,x]*[[:digit:]] > /dev/null
format="$?"
if [ "$detec" = "1" ] ;
then
	if [ "$format" = "1" ] ;
	then
		echo "$2"
		echo
		echo "Episode NOT Following Proper Naming Rules"
		echo "Ex: s01e01, s01x02, 01x03, etc..."
		name_failed
		## Exiting
	fi
fi


###### Remove Junk Files

for junk in $GARBAGE
do
	trash=$(cd "$1" ; ls *.$junk 2> /dev/null)
	if [ ! -z $trash ] ;
	then
		find "$1" -name *.$junk -type f -exec rm -f {} \;
		echo ">>> $junk Removed [ $trash ]"
	else
		echo "$junk Not Found"
	fi
done


###### Check if XBMC is Active

echo
attempt="0"
2
while true; do
attempt=$(( attempt + 1 ))
if [ "$attempt" = "7" ] ;
then
	echo
	echo ">> XBMC Not Responding to WOL Packets."
	echo ">> Attempted To Wake XBMC [ 2 ] Times."
	echo ">> XBMC Has Failed to Wake"
	echo
	fail="1"
	break
fi
ping -c 4 $xbmc_ip > /dev/null 2>&1
result=$?
if [ "$result" = "1" ] ;
then
	echo ">> XBMC is Inactive"
	echo "Waking XBMC (MAC: $xbmc_mac)"
	wakeonlan $xbmc_mac > /dev/null 2>&1
	echo "Sleeping 100 seconds. "
	sleep 100
	echo "Timer Completed."
	echo "Retrying XBMC..."
	echo
	attempt=$(( attempt + 2 ))
	tried="1"
	continue
else
	break
fi
done


if [ "$result" = "0" ] ;
then
	if [ "$tried" = "1" ] ;
	then
		echo ">> XBMC Now Active"
		echo "Continuing"
		fail="0"
	else
		echo ">> XBMC is Active"
		echo "Continuing"
		fail="0"
	fi
fi


###### TV Variables

##show_name_and_season=$(echo "$1/" | awk -F/ '{print $(NF-2)"/"$(NF-1)}' | sed -e "s/\b\(.\)/\u\1/g")
show_name_and_season=$(echo "$1/" | awk -F/ '{print $(NF-2)"/"$(NF-1)}' | sed "s/\b\(.\)/\u\1/g" | sed 's/\/S/\/s/g')
show_name=$(echo `echo "$1/" | awk -F/ '{print $(NF-2)"/"$(NF-1)}'` | sed -e 's/\/.*//' | sed -e "s/\b\(.\)/\u\1/g")
show_season=$(echo "$1/" | awk -F/ '{print $(NF-1)}' | sed 's/s//')
show_episode=$(echo "$2/" | grep -o [S,s]*[[:digit:]][[:digit:]][E,e,X,x][[:digit:]][[:digit:]] | cut -c 4- | tr '[:upper:]' '[:lower:]' | sed 's/e//')


###### Movie Variables

movie_name_and_year=$(echo "$1/" | awk -F/ '{print $(NF-1)}' | sed -e "s/\b\(.\)/\u\1/g")
movie_name=$(echo "$1/" | awk -F/ '{print $(NF-1)}' | sed -e 's/([^()]*)//g' | sed -e "s/\b\(.\)/\u\1/g")
movie_year=$(echo "$1/" | awk '{print $NF}' | tr -d "/")


debug ()
{
echo "Debugging Info:"
if [ $detec = "1" ] ;
then
	echo -ne "Show Name / Season................: " && echo "$show_name_and_season"
	echo -ne "Show Season + Episode.............: " && echo s"$show_season"e"$show_episode"
	echo -ne "Show Name.........................: " && echo "$show_name"
	echo -ne "Show Season.......................: " && echo s"$show_season"
	echo -ne "Show Episode......................: " && echo e"$show_episode"
elif [ "$detec" = "0" ] ;
then
	echo -ne "Movie Name / Year................:" && echo " $movie_name_and_year"
	echo -ne "Movie Name + Year................:" && echo " $movie_name""$movie_year"
	echo -ne "Movie Name.......................: " && echo "$movie_name"
	echo -ne "Movie Year.......................: " && echo "$movie_year"
fi
}


###### Update '_TV', '_Uncategorized_TV', '_Movies', '_Documentaries', '_Anime', or '_To-Archive'

if [ "$5" = "$SAB_TV" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification:"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: TV\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name  [ s$show_season e$show_episode ]"'.g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo "Updating TV Library --> [ TV ]"
		echo
		echo ">> Registering TV Show [ $show_name ] with XBMC Library"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_TV/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		sleep 10
		echo ">> Adding: Season [ $show_season ] Episode [ $show_episode ] to XBMC Library"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_TV/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name_and_season"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo "Commands Run:"
	echo
	echo ">> Register Show"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_TV/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name"'.g'""
	echo
	echo ">> Update Episode"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_TV/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name_and_season"'.g'""
	echo
elif [ "$5" = "$SAB_Uncategorized_TV" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification:"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: TV-Uncat\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"Uncategorized TV"'.g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
	fi
elif [ "$5" = "$SAB_Movies" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification:"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Movies\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo "Updating Movie Library --> [ Movies ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_Movies/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo "Command Run:"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_Movies/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$5" = "$SAB_Documentaries" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification:"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Documentary\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo "Updating Movie Library --> [ Documentaries ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_Documentaries/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo "Command Run:"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_Documentaries/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$5" = "$SAB_Archive" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification:"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Archive\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo "Updating Movie Library --> [ Archive ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_To-Archive/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo "Command Run:"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_To-Archive/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$5" = "$SAB_Anime" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification:"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Anime\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo "Updating Movie Library --> [ Anime ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_Anime/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo "Command Run:"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$remote/export/_Anime/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
fi

sleep 5
if [ "$fail" = "0" ] ;
then
	success
else
	failure
fi