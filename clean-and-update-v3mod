#!/bin/bash

# Copyright (c) March 2013, Eric Andrew Bixler
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	* Redistributions of source code must retain the above copyright
#	notice, this list of conditions and the following disclaimer.
#	* Redistributions in binary form must reproduce the above copyright
#	notice, this list of conditions and the following disclaimer in the
#	documentation and/or other materials provided with the distribution.
#	* Neither the name of the <organization> nor the names of its contributors
#	may be used to endorse or promote products derived from this software
#	without specific prior written permission.


###### Change The Following Variables:

## Note: It would be best to enable the option "Process only verified jobs" in SABnzbd under: Config --> Switches --> Post processing
## Note: make sure the XBMC web server is enabled

## XBMC details
xbmc_port="8090"
xbmc_ip="192.168.2.33"
xbmc_mac="BC:5F:F4:1D:8C:B4"
xbmc_pass="xbmc"
xbmc_user="xbmc"

## Set this to the IP of the machine running SABnzbd, 127.0.0.1 if its the same machine
downloader="192.168.2.104"

## What file-sharing protocol are we using for our remote/local shares; set to "smb", or "nfs" (others may work; havent tested them)
protocol="nfs"

## downloader scan paths
tv_path="export/_TV"
### uncategorized tv has no path to define, since we dont scan it to the library.
### we only send a visual notification to XBMC when SAB finishes an uncategorized download.
### examples include: out of season episodes; single episode specials, or newscast documentaries.
### these types of video are problematic when matching metadata with thetvdb.com, and are best left unidentified.
anime_path="export/_Anime"
archive_path="export/_To-Archive"
documentary_path="export/_Documentaries"
movie_path="export/_Movies"

## Set your categories from SABnzbd here
SAB_TV="tv"
SAB_Uncategorized_TV="uncat_tv"
SAB_Anime="anime"
SAB_Archive="archive"
SAB_Documentaries="documentaries"
SAB_Movies="movies"

## Set files to remove after SAB processing here
TV_GARBAGE="nfo srt sfv srr url txt md5 diz jpg bmp png"
UNCATTV_GARBAGE="nfo srt sfv srr url txt md5 diz jpg bmp png"
MOVIE_GARBAGE="sfv srr url txt md5 diz jpg bmp png"


#############################################
###### ATTENTION: DO NOT EDIT PAST THIS POINT
#############################################

pproc=$7
cat=$5
fpath=$1
cjob=$3
nzb=$2
grp=$6

success ()
{
	echo
	echo ">> Time Completed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Success: Library Update Completed."
	exit 0
}

wake_failure ()
{
	echo
	echo ">> Time Failed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: Library Not Updated."
	echo "Failed: Issue: XBMC Didn't Respond to WOL Request."
	exit 1
}

processing_failed ()
{
	echo
	echo ">> Time Failed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: Library Not Updated."
	echo "Failed: Issue: SABnzbd Post-Processing Failure."
	exit 1
}

name_failed ()
{
	echo
	echo ">> Time Failed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: Library Not Updated."
	echo "Failed: Issue: Season/Episode Naming Scheme Undetectable."
	exit 1
}


###### Check Post-Processing Outcome From SAB

if [ "$pproc" -ge "1" ] ;
then
	echo
	echo "Error: SABnzbd Post-Processing Failed !"
	processing_failed
	## Failure, We're Exiting
fi


###### Define Junk Files & Set Video Category

if [ "$cat" = "$SAB_TV" ] ;
then
	echo
	echo "[ TV ] Detected"
	echo
	GARBAGE=$TV_GARBAGE
	detec="1"
fi
if [ "$cat" = "$SAB_Uncategorized_TV" ] ;
then
	echo
	echo "[ Uncategorized TV ] Detected"
	echo
	GARBAGE=$UNCATTV_GARBAGE
fi
if [ "$cat" = "$SAB_Movies" ] ;
then
	echo
	echo "[ Movie ] Detected"
	echo
	GARBAGE=$MOVIE_GARBAGE
	detec="0"
fi


###### Check For Proper Scene Naming Scheme, ex: s01e01, S01E01, etc.

echo "$nzb" | grep -o [S,s]*[[:digit:]][E,e,X,x]*[[:digit:]] > /dev/null
format="$?"
if [ "$detec" = "1" ] ;
then
	if [ "$format" = "1" ] ;
	then
		echo "$nzb"
		echo
		echo "Show Not Following A Recognizable Season/Episode Naming Standard"
		echo "Ex: s01e01, s01x02, 01x03, etc..."
		name_failed
		## Failure, We're Exiting
	fi
fi


###### Remove Junk Files

nodisp="0"
for junk in $GARBAGE ;
do
	trash=$(cd "$fpath" ; ls *.$junk 2> /dev/null)
	if [ ! -z $trash ] ;
	then
		nodisp=$(( nodisp + 1 ))
		if [[ "$nodisp" < "2" ]] ;
		then
			echo ">> Junk Files Found"
		fi
		find "$fpath" -name *.$junk -type f -exec rm -f {} \;
		echo ".$junk Removed -----> [ $trash ]"
		clean="0"
	fi
done
if [ "$clean" != "0" ] ;
then
	echo ">> No Junk Files Found"
	echo "Nothing Removed"
fi


###### Check if XBMC is Active

echo
attempt="0"

while true ;
do
	attempt=$(( attempt + 1 ))
	if [ "$attempt" = "7" ] ;
	then
		echo
		echo ">> XBMC Has Not Responded to WOL Packets."
		echo ">> Attempted To Wake XBMC [ 2 ] Times."
		echo ">> XBMC Has Failed to Wake"
		echo
		fail="1"
		break
	fi
	ping -c 4 $xbmc_ip > /dev/null 2>&1
	result=$?
	if [ "$result" = "1" ] ;
	then
		echo ">> XBMC Is Inactive"
		echo "Waking XBMC [ MAC: $xbmc_mac ]"
		wakeonlan $xbmc_mac > /dev/null 2>&1
		echo "Sleeping 100 seconds. "
		sleep 100
		echo "Timer Completed."
		echo "Retrying XBMC..."
		echo
		attempt=$(( attempt + 2 ))
		tried="1"
		continue
	else
		break
	fi
done


if [ "$result" = "0" ] ;
then
	if [ "$tried" = "1" ] ;
	then
		echo ">> XBMC Now Active"
		echo "Continuing"
		fail="0"
	else
		echo ">> XBMC Is Active"
		echo "Continuing"
		fail="0"
	fi
fi


###### TV Variables

show_name_and_season=$(echo "$fpath/" | awk -F/ '{print $(NF-2)"/"$(NF-1)}' | sed "s/\b\(.\)/\u\1/g" | sed 's/\/S/\/s/g')
show_name=$(echo `echo "$fpath/" | awk -F/ '{print $(NF-2)"/"$(NF-1)}'` | sed -e 's/\/.*//' | sed -e "s/\b\(.\)/\u\1/g")
show_season=$(echo "$fpath/" | awk -F/ '{print $(NF-1)}' | sed 's/s//')
show_episode=$(echo "$nzb/" | grep -o [S,s]*[[:digit:]][[:digit:]][E,e,X,x][[:digit:]][[:digit:]] | cut -c 4- | tr '[:upper:]' '[:lower:]' | sed 's/e//')


###### Movie Variables

movie_name_and_year=$(echo "$fpath/" | awk -F/ '{print $(NF-1)}' | sed -e "s/\b\(.\)/\u\1/g")
movie_name=$(echo "$fpath/" | awk -F/ '{print $(NF-1)}' | sed -e 's/([^()]*)//g' | sed -e "s/\b\(.\)/\u\1/g")
movie_year=$(echo "$fpath/" | awk '{print $NF}' | tr -d "/" | tr -d '()' )


debug ()
{
echo ">> Debuging Info"
if [ $detec = "1" ] ;
then
	echo "Show Name & Season...............: $show_name_and_season"
	echo "Show Name........................: $show_name"
	echo "Show Season......................: $show_season"
	echo "Show Episode.....................: $show_episode"
elif [ "$detec" = "0" ] ;
then
	echo "Movie Name & Year................: $movie_name_and_year"
	echo "Movie Name.......................: $movie_name"
	echo "Movie Year.......................: $movie_year"
fi
echo
echo ">> SABnzbd Data"
echo "SABnzbd Post-Processing..........: `if [[ "$pproc" -eq "0" ]]; then echo "Passed" ; else echo "Failed" ; fi` [ $pproc ]"
echo "User Defined Category............: $cat"
echo "Final Path of Job................: $fpath"
echo "NZB File(s) Name.................: $nzb"
echo "Clean Job Name...................: $cjob"
echo "Usenet Group.....................: $grp"
}

folder_contents ()
{
echo "Contents of Folder:"
ls "$fpath"*
}


###### Update and Notify

if [ "$cat" = "$SAB_TV" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: TV\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name  [ s$show_season / e$show_episode ]"'.g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo ">> Updating Library --> [ TV ]"
		echo "Continuing"
		echo
		echo ">> (Re)Register: TV Show [ $show_name ] with XBMC Library"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		sleep 10
		echo ">> Adding: Season [ $show_season ] Episode [ $show_episode ] to XBMC Library"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name_and_season"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	folder_contents
	echo
	echo ">> Commands Run"
	echo
	echo "[ (Re)Register Show ]"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name"'.g'""
	echo
	echo "[ Update Episode ]"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name_and_season"'.g'""
	echo
elif [ "$cat" = "$SAB_Uncategorized_TV" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: TV-Uncat\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"Uncategorized TV"'.g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
	fi
elif [ "$cat" = "$SAB_Movies" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Movies\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo ">> Updating Library --> [ Movies ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$movie_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	folder_contents
	echo
	echo ">> Command Run"
	echo
	echo "[ Register Movie ]"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$movie_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$cat" = "$SAB_Documentaries" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Documentary\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo ">> Updating Library --> [ Documentaries ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$documentary_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo ">> Command Run"
	echo
	echo "[ Register Movie ]"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$documentary_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$cat" = "$SAB_Archive" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Archive\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo ">> Updating Library --> [ Archive ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$archive_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo ">> Command Run"
	echo
	echo "[ Register Movie ]"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$archive_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$cat" = "$SAB_Anime" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Anime\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
		echo ">> Updating Library --> [ Anime ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$anime_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo ">> Command Run"
	echo
	echo "[ Register Movie ]"
	echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$anime_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
fi

sleep 5

if [ "$fail" = "0" ] ;
then
	success
	## Success, We're Done
else
	## else will be equal to 1, as set by; fail="1" under "Check if XBMC is Active"
	wake_failure
	## Failure, We're Exiting
fi