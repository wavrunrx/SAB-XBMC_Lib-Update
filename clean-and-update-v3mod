#!/bin/bash

# Copyright (c) March 2013, Eric Andrew Bixler
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	* Redistributions of source code must retain the above copyright
#	notice, this list of conditions and the following disclaimer.
#	* Redistributions in binary form must reproduce the above copyright
#	notice, this list of conditions and the following disclaimer in the
#	documentation and/or other materials provided with the distribution.
#	* Neither the name of the <organization> nor the names of its contributors
#	may be used to endorse or promote products derived from this software
#	without specific prior written permission.

###### Compatibility: XBMC (And OpenELEC) Frodo

###### Change The Following Variables:

## Note 1: ENABLE the option "Process only verified jobs" in SABnzbd, under: Config --> Switches --> Post processing
## Note 2: ENABLE the XBMC web server

## XBMC details
xbmc_port="8090"
xbmc_ip="192.168.2.33"
xbmc_mac="BC:5F:F4:1D:8C:B4"
xbmc_pass="xbmc"
xbmc_user="xbmc"

## Set this to the IP of the machine running SABnzbd, 127.0.0.1 if its the same machine
downloader="192.168.2.104"

## What file-sharing protocol are we using for our remote shares. set to "smb", or "nfs" (others may work; havent personally tested them with this script)
protocol="nfs"

## Downloader scan paths
tv_path="export/_TV"
### uncat_tv_path= DO NOT SET
### For uncategorized tv, we have no path to define, since we dont scan it to the xbmc library.
### we only send a visual notification to XBMC when SAB finishes an uncategorized tv download.
### examples include: out of season episodes; single episode specials, newscast documentaries, etc.
### these types of video are problematic when matching metadata with thetvdb, and are best left unidentified.
anime_path="export/_Anime"
archive_path="export/_To-Archive"
documentary_path="export/_Documentaries"
movie_path="export/_Movies"

## Set your SABnzbd categories here ...
## Note: if you add your own categories that i dont have listed here, you'll have to make sure they are set up elsewhere in the script
SAB_TV="tv"
SAB_Uncategorized_TV="uncat_tv"
SAB_Anime="anime"
SAB_Archive="archive"
SAB_Documentaries="documentaries"
SAB_Movies="movies"

## Set files to REMOVE after SABnzbd processing
TV_GARBAGE="nfo srt sfv srr url txt md5 diz jpg bmp png sub idx srt nzb"
UNCATTV_GARBAGE="nfo srt sfv srr url txt md5 diz jpg bmp png sub idx srt nzb"
MOVIE_GARBAGE="sfv srr url txt md5 diz jpg bmp png nzb"

## Time normally required for your XBMC machine to boot into a useable interface (60 seconds is usually more then enough here)
sleep_time="60"


#############################################
######
###### ATTENTION: DO NOT EDIT PAST THIS POINT
######
#############################################


pproc=$7
cat=$5
fpath=$1
cjob=$3
nzb=$2
grp=$6

fail="0"
attempt="0"

show_name_and_season=$(echo "$fpath/" | awk -F/ '{print $(NF-2)"/"$(NF-1)}' | sed "s/\b\(.\)/\u\1/g" | sed 's/\/S/\/s/g')
show_name=$(echo `echo "$fpath/" | awk -F/ '{print $(NF-2)"/"$(NF-1)}'` | sed -e 's/\/.*//' | sed -e "s/\b\(.\)/\u\1/g")
show_season=$(echo "$fpath/" | awk -F/ '{print $(NF-1)}' | sed 's/s//')
show_episode=$(echo "$nzb/" | grep -o [S,s,Season,season]*[[:digit:]][[:digit:]][E,e,X,x,Episode,episode][[:digit:]][[:digit:]] | cut -c 4- | tr '[:upper:]' '[:lower:]' | sed 's/e//')

movie_name_and_year=$(echo "$fpath/" | awk -F/ '{print $(NF-1)}' | sed -e "s/\b\(.\)/\u\1/g")
movie_name=$(echo "$fpath/" | awk -F/ '{print $(NF-1)}' | sed -e 's/([^()]*)//g' | sed -e "s/\b\(.\)/\u\1/g")
movie_year=$(echo "$fpath/" | awk '{print $NF}' | tr -d "/" | tr -d '()' )


success ()
{
	echo ">> Time Completed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Success: Library Update Completed."
	exit 0
}

wake_failure ()
{
	echo ">> Time Failed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: Library Not Updated."
	echo "Failed: Issue: XBMC Didn't Respond To Wake Requests."
	exit 1
}

processing_failed ()
{
	echo ">> Time Failed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: Library Not Updated."
	echo "Failed: Issue: SABnzbd Post-Processing Failure."
	exit 1
}

name_failed ()
{
	echo ">> Time Failed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: Library Not Updated."
	echo "Failed: Issue: Season/Episode Naming Scheme Not Recognized."
	exit 1
}

year_failed ()
{
	echo ">> Time Failed"
	echo "`date +"%A %b %e, %Y"`"
	echo "`date +"%r"`"
	echo
	echo "Failed: Library Not Updated."
	echo "Failed: Issue: Movie Release Year Unknown."
	exit 1
}


###### Check Dependencies Required For This Script To Run Properly

deps ()
{
DEPENDENCIES="wakeonlan curl test"
deps_ok="YES"

for dep in $DEPENDENCIES
do
	if ! which $dep &>/dev/null ;
	then
		echo "This Script Requires $dep To Run But It Is Not Installed"
		echo "Please Install It"
		deps_ok="NO"
	fi
done

if [[ "$deps_ok" == "NO" ]];
then
	echo "Unmet Dependencies."
	echo "Further Processing Halted"
	fail="1"
fi
}


###### Delete Junk Files

delete_junk ()
{
nodisp="0"
clean="1"
for junk in $GARBAGE ;
do
	trash=$(cd "$fpath" ; ls *.$junk 2> /dev/null)
	if [ ! -z $trash ] ;
	then
		nodisp=$(( nodisp + 1 ))
		if [[ "$nodisp" < "2" ]] ;
		then
			echo ">> Junk Files Found"
		fi
		find "$fpath" -name *.$junk -type f -exec rm -f {} \;
		echo ".$junk Deleted -----> [ $trash ]"
		clean="0"
		echo
	fi
done
if [ "$clean" != "0" ] ;
then
	echo ">> No Junk Files Found"
	echo "Nothing Deleted"
fi
}

###### Some Debugging Output

debug ()
{
echo ">> Debuging Info"
if [ $detec = "1" ] ;
then
	echo "Show Name & Season..............: $show_name_and_season"
	echo "Show Name.......................: $show_name"
	echo "Show Season.....................: $show_season"
	echo "Show Episode....................: $show_episode"
elif [ "$detec" = "0" ] ;
then
	echo "Movie Name & Year...............: $movie_name_and_year"
	echo "Movie Name......................: $movie_name"
	echo "Movie Year......................: $movie_year"
fi
echo
echo ">> SABnzbd Data"
echo "SABnzbd Post-Processing.........: `if [[ "$pproc" -eq "0" ]]; then echo "Passed" ; else echo "Failed" ; fi` [ $pproc ]"
echo "User Defined Category...........: $cat"
echo "Final Path of Job...............: $fpath"
echo "NZB File(s) Name................: $nzb"
echo "Clean Job Name..................: $cjob"
echo "Usenet Group....................: $grp"
}


## if $movie_year, isnt properly extracted, most likley $movie_name isnt either (probabally due to an improper $cjob name)
## were going to halt further processing as we dont want to update XBMC's movie library with a useless scene name

lib_year_check ()
{
if [ "$detec" = "0" ] ;
then
	if [ "$movie_year" ! -eq "$movie_year" 2> /dev/null ];
	then
		delete_junk
		year_failed
	fi
fi
}


## $show_season, isnt properly extracted, most likley $show_episode isnt either (probabally due to an improper $cjob name)
## were going to halt further processing as we dont want to update XBMC's movie library with a useless scene name

lib_season_check ()
{
if [ "$detec" = "1" ] ;
then
	if [ "$show_season" ! -eq "$show_season" 2> /dev/null ];
	then
		delete_junk
		name_failed
	fi
fi
}


###### Rename Everything In Directory To NZB Name + Original Extension

rename_files_to_scene_name ()
{
cd "$fpath"
for i in * ;
do
	fn=$(echo $nzb | sed 's/\(.*\)\..*/\1/')
	ext=$(echo $i | sed 's/.*\.//')
	if [ "$i" != "$fn".$ext ] ;
	then
		mv -f "$i" "$fn".$ext
	fi
done
}


###### Show The Contents Of The Working Directory

folder_contents ()
{
if [ "$cat" =  "$SAB_Movies" ] ;
then
	sleep 5
	echo ">> Contents Of Folder For: [ $movie_name]"
	test ! -f "$fpath"/*.nfo && echo " > No NFO Found !" && echo "   -----------"
	ls "$fpath"* | awk -F"/" '{ print $NF }'
fi
}


#############################################
###### BEGIN
#############################################


###### Set A Video Category & Define The Junk File 'Set' To Be Used

if [ "$cat" = "$SAB_TV" ] ;
then
	echo
	echo "[ TV ] Detected"
	echo
	GARBAGE=$TV_GARBAGE
	detec="1"
fi
if [ "$cat" = "$SAB_Uncategorized_TV" ] ;
then
	echo
	echo "[ Uncategorized TV ] Detected"
	echo
	GARBAGE=$UNCATTV_GARBAGE
fi
if [[ "$cat" = "$SAB_Movies" || "$cat" = "$SAB_Anime" || "$cat" = "$SAB_Documentaries" || "$cat" = "$SAB_Archive" ]] ;
then
	echo
	echo "[ Movie ] Detected"
	echo
	GARBAGE=$MOVIE_GARBAGE
	detec="0"
fi


###### Silent: Check Post-Processing Outcome From SAB; Exit If Return Is >1

if [ "$pproc" -ge "1" ] ;
then
	echo
	echo "Error: SABnzbd Post-Processing Failed !"
	echo
	processing_failed
	echo
	## Failure, We're Exiting
fi


###### Silent: Check For Proper 'Scene' Season/Episode Naming Scheme, ex: s01e01, S01E01, etc...

echo "$nzb" | grep -o [S,s,Season,season][[:digit:]]*[E,e,X,x,Episode,episode][[:digit:]] > /dev/null
format="$?"
if [ "$detec" = "1" ] ;
then
	if [ "$format" = "1" ] ;
	then
		echo "$nzb"
		echo
		echo "Donwloaded Files Not Following A Recognizable Season/Episode Naming Scheme"
		echo "Ex: s01e01, s01x02, 01x03, etc..."
		echo "Further Processing Halted"
		echo
		delete_junk
		name_failed
		echo
		## Failure, We're Exiting
	fi
fi


###### Silent: Check For Proper 'Scene' Movie Naming

if [ "$detec" = "0" ] ;
then
	year=$(echo "$nzb" | grep -o [[:digit:]][[:digit:]][[:digit:]][[:digit:]] | sed s'/1080//g;/^$/d')
	if [ "$year" = "" ] ;
	then
		echo "The NZB Release Of"
		echo "$nzb"
		echo
		echo "Does Not Contain A Release Year, As Required By Scene Naming Conventions"
		echo "Further Processing Halted"
		echo
		delete_junk
		year_failed
		echo
		## Failure, We're Exiting
	fi
fi


###### Delete Junk Files (Previously Defined)

delete_junk


###### Conditional: Check If XBMC Is Active

echo
while true ;
do
	attempt=$(( attempt + 1 ))
	if [ "$attempt" = "7" ] ;
	then
		echo
		echo ">> XBMC Has Not Responded to WOL Packets."
		echo ">> Attempted To Wake XBMC [ 2 ] Times."
		echo ">> XBMC Has Failed to Wake"
		echo
		fail="1"
		break
	fi
	xbmc_status=$(curl -v -H "Content-Type: application/json" -u $xbmc_user:$xbmc_pass -X POST -d '{"jsonrpc":"2.0","method":"JSONRPC.Ping","id":"1"}' http://$xbmc_ip:$xbmc_port/jsonrpc 2>/dev/null | cut -c 36- | sed -e 's/\":"/: /g' -e 's/["{}]//g')
	if [ "$xbmc_status" != "pong" ] ;
	then
		echo ">> XBMC Is Inactive"
		deps
		echo "Waking XBMC ------> [ MAC: $xbmc_mac ]"
		wakeonlan $xbmc_mac > /dev/null 2>&1
		echo "Pausing $sleep_time seconds. "
		sleep $sleep_time
		echo "Timer Completed."
		echo "Retrying XBMC..."
		echo
		attempt=$(( attempt + 2 ))
		tried="1"
		continue
	else
		break
	fi
done


###### Display XBMC's State

if [ "$xbmc_status" = "pong" ] ;
then
	if [ "$tried" = "1" ] ;
	then
		echo ">> XBMC Now Active"
		echo "Continuing"
		fail="0"
	else
		echo ">> XBMC Is Active"
		echo "Continuing"
		fail="0"
	fi
fi

###### Conditional: Check Extraction Of Movie Year From $nzb (aka $2 from SABnzbd) (Previously Defined)

lib_year_check

###### Conditional: Check Extraction Of TV Season From $nzb (aka $2 from SABnzbd) (Previously Defined)

lib_season_check


###### Update And Notify

if [ "$cat" = "$SAB_TV" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: TV\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name  [ s$show_season / e$show_episode ]"'.g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		sleep 5
		echo
		echo ">> Updating Library ------> [ TV ]"
		echo " > Re/Register: TV Show [ $show_name ] with XBMC Library"
		echo    "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		sleep 10
		echo " > Register: Season [ $show_season ] Episode [ $show_episode ] with XBMC Library"
		echo    "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name_and_season"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	echo ">> Commands Run"
	echo " > Re/Register Show:"
	echo "   curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name"'.g'""
	echo " > Register Episode:"
	echo "   curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$tv_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$show_name_and_season"'.g'""
	echo
elif [ "$cat" = "$SAB_Uncategorized_TV" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: TV-Uncat\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"Uncategorized TV"'.g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
	fi
elif [ "$cat" = "$SAB_Movies" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Movies\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		sleep 5
		echo
		echo ">> Updating Library ------> [ Movies ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$movie_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	rename_files_to_scene_name
	folder_contents
	echo
	echo ">> Command Run"
	echo " > Register Movie:"
	echo "   curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$movie_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$cat" = "$SAB_Documentaries" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Documentary\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		sleep 5
		echo
		echo ">> Updating Library ------> [ Documentaries ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$documentary_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	rename_files_to_scene_name
	folder_contents
	echo
	echo ">> Command Run"
	echo " > Register Movie:"
	echo "   curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$documentary_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$cat" = "$SAB_Archive" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Archive\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		sleep 5
		echo
		echo ">> Updating Library ------> [ Archive ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$archive_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	rename_files_to_scene_name
	folder_contents
	echo
	echo ">> Command Run"
	echo " > Register Movie:"
	echo "   curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$archive_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
elif [ "$cat" = "$SAB_Anime" ] ;
then
	if [ "$fail" = "0" ] ;
	then
		echo
		echo ">> Sending GUI Notification"
		echo "curl -v -H \"Content-type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\" Library Update: Anime\",\"message\":\" zzz\",\"image\":\"https://dl.dropbox.com/u/66962/Sab/sabnzbd_512.png\",\"displaytime\":10000}}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's/zzz/'"$movie_name_and_year"'/g' | sh 2>/dev/null | cut -c 26- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		sleep 5
		echo
		echo ">> Updating Library ------> [ Anime ]"
		echo "curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$anime_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g' | sh 2>/dev/null | cut -c 30- | sed -e 's/\":"/: /g' -e 's/["{}]//g'
		echo
	fi
	debug
	echo
	rename_files_to_scene_name
	folder_contents
	echo
	echo ">> Command Run"
	echo " > Register Movie:"
	echo "   curl -s -H \"Content-Type: application/json\" -u $xbmc_user:$xbmc_pass -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"VideoLibrary.Scan\", \"params\":{\"directory\":\"$protocol://$downloader/$anime_path/zzz/\"}, \"id\": \"scan\"}' http://$xbmc_ip:$xbmc_port/jsonrpc" | sed 's.zzz.'"$movie_name_and_year"'.g'""
	echo
fi


###### $fail Was Not Triggered; Everything Went Fine

sleep 5
if [ "$fail" = "0" ] ;
then
	success
	## Success, We're Done
else
	## fail="1" is set under "Check if XBMC is Active"
	wake_failure
	## Failure, We're Exiting
fi